{
  "_args": [
    [
      "react-typist",
      "/home/akshat/Programs/Homepage"
    ]
  ],
  "_from": "react-typist@latest",
  "_hasShrinkwrap": false,
  "_id": "react-typist@2.0.5",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-typist",
  "_nodeVersion": "8.12.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-typist_2.0.5_1546396065659_0.4639456635584014"
  },
  "_npmUser": {
    "email": "juans.tejada@gmail.com",
    "name": "jstejada"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "name": "react-typist",
    "raw": "react-typist",
    "rawSpec": "",
    "scope": null,
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-typist/-/react-typist-2.0.5.tgz",
  "_shasum": "9830395a73a03e6368e1392ecb98edaa3a648e44",
  "_shrinkwrap": null,
  "_spec": "react-typist",
  "_where": "/home/akshat/Programs/Homepage",
  "author": {
    "name": "Juan Tejada"
  },
  "bugs": {
    "url": "https://github.com/jstejada/react-typist/issues"
  },
  "dependencies": {
    "prop-types": "^15.5.10"
  },
  "description": "Typing animations with React",
  "devDependencies": {
    "autoprefixer": "^6.3.3",
    "babel-core": "^6.7.2",
    "babel-eslint": "^6.0.0-beta.6",
    "babel-loader": "^6.2.4",
    "babel-plugin-transform-class-properties": "^6.16.0",
    "babel-preset-es2015": "^6.6.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.16.0",
    "css-loader": "^0.23.1",
    "eslint": "^2.4.0",
    "eslint-config-airbnb": "^6.1.0",
    "eslint-loader": "^1.3.0",
    "eslint-plugin-react": "^4.2.3",
    "eslint_d": "^4.1.0",
    "extract-text-webpack-plugin": "^1.0.1",
    "jasmine-core": "^2.3.4",
    "jasmine-react-matchers": "^1.0.2",
    "karma": "^0.13.10",
    "karma-chrome-launcher": "^0.2.0",
    "karma-cli": "^0.1.1",
    "karma-jasmine": "^0.3.6",
    "karma-sourcemap-loader": "^0.3.5",
    "karma-webpack": "^1.7.0",
    "mock-promises": "^0.6.1",
    "node-sass": "^3.4.2",
    "postcss-loader": "^0.8.2",
    "promise-mock": "^1.1.0",
    "react": "^16.0.0",
    "react-dom": "^16.0.0",
    "sass-loader": "^3.2.0",
    "style-loader": "^0.13.0",
    "webpack": "^1.12.14",
    "webpack-dev-server": "^1.14.1"
  },
  "directories": {},
  "dist": {
    "fileCount": 16,
    "integrity": "sha512-iZCkeqeegO0TlkTMiH2JD1tvMtY9RrXkRylnAI6m8aCVAUUwNzoWTVF7CKLij6THeOMcUDCznLDDvNp55s+YZA==",
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcLCGiCRA9TVsSAnZWagAAYlMQAJ4Yc8qdEP9sobPykPs/\n2BL2y9ulda+HxqEGfmbwmmzIV1G0BU2EfTHEo/Q1bYwIXbQAy5nFVVxbHpBs\nbgekSSVWDhIdh/casCKnNbvBqbkWk15ayd7LaaAn3CISbik5ay/nLZc5Iapu\nObGoJj4YNQwj0sCp5A5mJFSvbcrbXY31ptpbRLaYGNuzpOcXCGbeFjI0Chq7\niuz56oH70P+MLvqY5ECfKgb7rX84K3zy58+c0xkXFfbVHNipp8tZMpWmw/n7\nyLp8Hvv1XVye0RLfAKXo0MvWRshJtuKCtnyX5i6yrs/X2yF7SoJY5UTdq3MA\nN15mqjrydHxeekmbfGnEtpeR3+2yiQk35HFApm2q4VEAk2vkr9fWj7gIt9w9\nUgM6X41duu9Olr9tAT7TCh4r+KncpSeyrrfQVfXUxyi+FC9dgz/UFpw8GaGS\nsk1thTJRvzy8dBOU6Y2LUU56liMTRo5QtJiVedBGuyVzi7UZgoc8mHSzWyah\nSbP1KdTHmhpAKCMwKhXHbQqS20wUy6NYBAILVTKfFBIqt9Um4B+sQmnQKVp3\nh3sorIXNYuoLLyNTeH+WGm1CixVxb9RJWx646wqZSReHVG5oRh/vbevis6YZ\nPK+d38sj26K7d7oPQZNuQykejum5m9iyJe54zZUUJQppl2Abd7+yU9GvN1nA\nJH62\r\n=XeYJ\r\n-----END PGP SIGNATURE-----\r\n",
    "shasum": "9830395a73a03e6368e1392ecb98edaa3a648e44",
    "tarball": "https://registry.npmjs.org/react-typist/-/react-typist-2.0.5.tgz",
    "unpackedSize": 152722
  },
  "gitHead": "5a97259b3228e61ed9d335c993fbb0a68cd8161b",
  "homepage": "https://github.com/jstejada/react-typist#readme",
  "keywords": [
    "animation",
    "animations",
    "react",
    "react typist",
    "react-typist",
    "reactjs",
    "typewriter",
    "typewriter animation",
    "typewriter animations",
    "typing",
    "typing animation",
    "typing animations",
    "typist"
  ],
  "license": "MIT",
  "main": "dist/Typist.js",
  "maintainers": [
    {
      "name": "jstejada",
      "email": "juans.tejada@gmail.com"
    }
  ],
  "name": "react-typist",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14 || ^15.0 || ^16.0",
    "react-dom": "^^0.14 || ^15.0 || ^16.0"
  },
  "readme": "# React Typist [![npm](https://img.shields.io/npm/dm/react-typist.svg)]() [![npm](https://img.shields.io/npm/v/react-typist.svg)]()\nReact Component for making typing animations. Wrap `Typist` around your text or any\nelement tree to animate text inside the tree. Easily stylable and highly\nconfigurable.\n\n\n## Install\n```shell\nnpm install react-typist --save\n```\n\n\n## Live Example\n* <a href=\"//jstejada.github.io/react-typist\" target=\"_blank\">Basic example</a>\n\n\n## Basic Usage\n#### CommonJS Module (using webpack or browserify):\n```jsx\nimport React, {Component} from 'react';\nimport Typist from 'react-typist';\n\nexport default class MyComponent extends Component {\n\n  render() {\n    return (\n      <Typist>\n        Animate this text.\n      </Typist>\n    );\n  }\n}\n```\n\n#### UMD module:\nInclude `dist/standalone/Typist.js` into your build, using whatever build tool\nor manually entering a `<script>` tag.\n\n<a name=\"cssBlink\"></a>\n#### CSS\nTypist contains a simple CSS file to make the cursor at the end of the text\nblink. To include it, you must include\n[`dist/Typist.css`](/dist/Typist.css) in your build.\n\n\n## Children\nTypist will animate any text present in its descendents. Each text\nnode will be animated as it is encountered in depth-first traversal of the\n`children` tree, one after the other.\n\nTypist can take as `children` any valid node that can be rendered in a React\napplication, i.e. it could be undefined, null, a boolean, a number, a string,\na React element, or an array of any of those types recursively.\n\nThis also implies that you are free to pass any props to the `children` of Typist,\nincluding your own css classes (as in any React application). This allows you to\neasily style your text inside Typist:\n\n```jsx\n<Typist>\n  <span className=\"my-custom-class\"> First Sentence </span>\n  <br />\n  <div className=\"container\">\n    <p> This will be animated after first sentence is complete </p>\n    <MyComponent prop1=\"val1\"> More text. </MyComponent>\n  </div>\n  Final sentence\n</Typist>\n```\n\nRefer to [`examples/`](/examples) for more examples.\n\n\n## Typist.Delay\nIn order to insert delays into your animation, you can use the `Typist.Delay`\nComponent:\n\n```jsx\n<Typist>\n  <p> First Sentence </p>\n  <Typist.Delay ms={500} />\n  <br />\n  This won't be animated until 500ms after the first sentenced is rendered\n</Typist>\n```\n\nRefer to [`examples/`](/examples) for more examples.\n\n### Typist.Delay Props\n* [`ms`](#ms)\n\n<a name=\"ms\"></a>\n#### ms\n*Required*\n\nMilliseconds to apply for the delay\n\n\n## Typist.Backspace\n\nTypist also supports backspace animations via the `Typist.Backspace` Component:\n\n```jsx\n<Typist>\n  <span> First Sentence </span>\n  <Typist.Backspace count={8} delay={200} />\n  <span> Phrase </span>\n</Typist>\n```\n\nRefer to [`examples/`](/examples) for more examples.\n\n### Typist.Backspace Props\n* [`count`](#count)\n* [`delay`](#delay)\n\n<a name=\"count\"></a>\n#### count\n*Default*: `1`\n\nNumber of characters to backspace\n\n<a name=\"delay\"></a>\n#### delay\n*Default*: `0`\n\nDelay in milliseconds before the backspace animation starts\n\n\n## Typist Props\n* [`className`](#className)\n* [`avgTypingDelay`](#avgTypingDelay)\n* [`stdTypingDelay`](#stdTypingDelay)\n* [`startDelay`](#startDelay)\n* [`cursor`](#cursor)\n* [`onCharacterTyped`](#onCharacterTyped)\n* [`onLineTyped`](#onLineTyped)\n* [`onTypingDone`](#onTypingDone)\n* [`delayGenerator`](#delayGenerator)\n\n<a name=\"className\"></a>\n#### className\n*Default*: `null`\n\nCSS class name to be applied to the Typist root node. Typist will always\nhave the CSS class `Typist` applied to it.\n\n```jsx\n<Typist className=\"MyTypist\"> Animate this text. </Typist>\n```\n will produce:\n```jsx\n<div class=\"Typist MyTypist\"> Animate this text. </div>\n```\n\n<a name=\"avgTypingDelay\"></a>\n#### avgTypingDelay\n*Default*: `70`\n\nAverage typing delay in milliseconds between every keystroke of the typing\nanimation **(Less is faster)**. The distribution of the typing delays between\nstrokes is not uniform, to make the animation more human like.\n\n<a name=\"stdTypingDelay\"></a>\n#### stdTypingDelay\n*Default*: `25`\n\nStandard deviation of typing delay between keystrokes of the typing animation.\n**(Less means more uniform, i.e. less variance between values)**.\n\n<a name=\"startDelay\"></a>\n#### startDelay\n*Default*: `0`\n\nMilliseconds before typing animation begins.\n\n<a name=\"cursor\"></a>\n#### cursor\n*Default*:\n```js\n{\n  show: true,\n  blink: true,\n  element: '|',\n  hideWhenDone: false,\n  hideWhenDoneDelay: 1000,\n}\n```\n\nObject containing options for cursor:\n\n* `show (bool)`: whether to display cursor at the end of text.\n* `blink (bool)`: whether to add blinking animation to cursor. You must also\ninclude the [css](#cssBlink)\n* `element (string)`: character to use for the cursor\n* `hideWhenDone (bool)`: whether the cursor should be hidden after tyiping\nanimation is complete.\n* `hideWhenDoneDelay (int)`: delay in ms to be applied before hiding cursor when\ntyping animation is complete.\n\n<a name=\"onCharacterTyped\"></a>\n#### onCharacterTyped\nFunction to be called every time a character is typed on the screen.\n\n```js\nfunction(character, charIdx) {\n  ...\n}\n```\n\n<a name=\"onLineTyped\"></a>\n#### onLineTyped\nFunction to be called every time a line is typed on the screen.\n\n```js\nfunction(line, lineIdx) {\n  ...\n}\n```\n\n<a name=\"onTypingDone\"></a>\n#### onTypingDone\nFunction to be called when typing animation is complete.\n\n<a name=\"delayGenerator\"></a>\n#### delayGenerator\n*Default*: [`gaussianDistribution`][normal-dist]\n\nFunction to be called to generate the typing delay (in ms) for every keystroke\nof the animation. Every time this function is called it should return a value\nin milliseconds. This function can be used to provide your own typing delay\ndistribution, for example uniform (e.g. always 100ms), or a deterministic\ndistribution.\n\nHowever, if you wish to insert delays at specific points in the animation,\nconsider useing the [`Delay`](#typistdelay) Component instead.\n\n```js\nfunction(mean, std, current = {line, lineIdx, character, charIdx, defDelayGenerator}) {\n  ...\n}\n```\n\n* `mean (number)`: Average typing delay. Will be the value of [`props.avgTypingDelay`](#avgTypingDelay)\n* `std (number)`: Standard deviation of typing delay. Will be the value of [`props.stdTypingDelay`](#stdTypingDelay)\n* `current.line (string)`: Value of line of text (Typist child) currently being animated.\n* `current.lineIdx (int)`: Index of line of text (Typist child) currently being animated.\n* `current.character (string)`: Value of character that was just rendered.\n* `current.charIdx (int)`: Index of character that was just rendered.\n* `current.defDelayGenerator (function)`: Reference to default delay\ngenerator function to be able to fall back to.\n\n\nThis function can also be used to introduce delays at specific points in the\ntyping animation.\n\ne.g.:\n```js\nfunction(mean, std, {line, lineIdx, charIdx, defDelayGenerator}) {\n  // Delay the animation for 2 seconds at the last character of the first line\n  if (lineIdx === 0 && charIdx === line.length - 1) {\n    return 2000;\n  }\n  return defDelayGenerator();\n}\n```\n\n\n## Troubleshooting\n### Internet Explorer Compatibility\nReact Typist makes use of Array.from() which is not supported in IE.\n\n`SCRIPT438: Object doesn't support property or method 'from' Typist.js (449,1)`\n\nTo resolve this, [babel-polyfill](https://babeljs.io/docs/usage/polyfill/) can be added to your project.\n\n ```shell\n npm install --save babel-polyfill\n ```\n\nYou can now include this module in your app at the entry point.\n\nES6:\n```js\nimport 'babel-polyfill'\n```\n\nCommonJS:\n```js\nrequire('babel-polyfill')\n```\n\n## Development\n\nTo build the examples and start the dev server, run:\n```shell\nnpm start\n```\nNow, open `http://localhost:8080` and start hacking!\n\n\nIf you just want to build the examples, run:\n```shell\nnpm run examples\n```\n\n\n## Running Tests\n\n```shell\nnpm test\n```\n\n\n## License\n\n[MIT](http://mit-license.org)\n\n[normal-dist]: https://en.wikipedia.org/wiki/Normal_distribution\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jstejada/react-typist.git"
  },
  "scripts": {
    "dist": "webpack --config webpack.dist.config.js",
    "examples": "webpack --devtool inline-source-map",
    "standalone": "webpack --config webpack.standalone.config.js",
    "start": "webpack-dev-server --devtool inline-source-map --progress --colors --inline --hot --public typist.dev:8080 --content-base examples",
    "test": "karma start karma.conf.js"
  },
  "version": "2.0.5"
}
